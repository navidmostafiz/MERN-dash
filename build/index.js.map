{"version":3,"sources":["../server/index.js"],"names":["Promise","global","connect","process","env","MONGO_URL","get","connection","on","console","error","info","version","port","normalizePort","PORT","set","server","createServer","listen","onError","onListening","val","parseInt","isNaN","syscall","bind","code","exit","addr","address"],"mappings":";;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIA,mBAASA,OAAT,GAAmBC,OAAOD,OAA1B,C,CAdA;;;;AAeA,mBAASE,OAAT,CAAiBC,QAAQC,GAAR,CAAYC,SAAZ,IAAyB,iBAAOC,GAAP,CAAW,WAAX,CAA1C;;AAEA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,YAAY;AAC1CC,UAAQC,KAAR,CAAc,+DAAd;AACD,CAFD;;AAIA,mBAASH,UAAT,CAAoBC,EAApB,CAAuB,WAAvB,EAAoC,YAAY;AAC9CC,UAAQE,IAAR,kBACiB,mBAASC,OAD1B,QAEET,QAAQC,GAAR,CAAYC,SAAZ,IAAyB,iBAAOC,GAAP,CAAW,WAAX,CAF3B;AAID,CALD;;AAOA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,cAAvB,EAAuC,YAAY;AACjDC,UAAQE,IAAR,gCAA0C,iBAAOL,GAAP,CAAW,WAAX,CAA1C;AACD,CAFD;;AAIA;;;;AAIA,IAAIO,OAAOC,cAAcX,QAAQC,GAAR,CAAYW,IAAZ,IAAoB,iBAAOT,GAAP,CAAW,MAAX,CAAlC,CAAX;AACA,cAAIU,GAAJ,CAAQ,MAAR,EAAgBH,IAAhB;;AAEA;;;;AAIA,IAAII,SAAS,eAAKC,YAAL,eAAb;;AAEA;;;;AAIAD,OAAOE,MAAP,CAAcN,IAAd;AACAI,OAAOT,EAAP,CAAU,OAAV,EAAmBY,OAAnB;AACAH,OAAOT,EAAP,CAAU,WAAV,EAAuBa,WAAvB;;AAEA;;;;AAIA,SAASP,aAAT,CAAuBQ,GAAvB,EAA4B;AAC1B,MAAIT,OAAOU,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAIE,MAAMX,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOS,GAAP;AACD;;AAED,MAAIT,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASO,OAAT,CAAiBV,KAAjB,EAAwB;AACtB,MAAIA,MAAMe,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMf,KAAN;AACD;;AAED,MAAIgB,OAAO,OAAOb,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd;;AAIA;AACA,UAAQH,MAAMiB,IAAd;AACE,SAAK,QAAL;AACElB,cAAQC,KAAR,CAAcgB,OAAO,+BAArB;AACAvB,cAAQyB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACEnB,cAAQC,KAAR,CAAcgB,OAAO,oBAArB;AACAvB,cAAQyB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAMlB,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,SAASW,WAAT,GAAuB;AACrB,MAAIQ,OAAOZ,OAAOa,OAAP,EAAX;AACA,MAAIJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,KAAKhB,IAFnB;AAGA,uBAAM,YAAN,EAAoB,kBAAkBa,IAAlB,GAAyB,MAAzB,GAAkC,cAAIpB,GAAJ,CAAQ,KAAR,CAAlC,GAAmD,MAAvE;AACD","file":"index.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nimport app from './app';\nimport config from 'config';\nimport debug from 'debug';\nimport http from 'http';\nimport mongoose from 'mongoose';\n\n/**\n * Get MONGO_URL from environment or config and connect mongodb throw mongoose.\n */\n\nmongoose.Promise = global.Promise;\nmongoose.connect(process.env.MONGO_URL || config.get('MONGO_URL'));\n\nmongoose.connection.on('error', function () {\n  console.error('Could not connect to MongoDB. Did you forget to run `mongod`?');\n});\n\nmongoose.connection.on('connected', function () {\n  console.info(\n    `APP MONGODB@${mongoose.version}:`,\n    process.env.MONGO_URL || config.get('MONGO_URL')\n  );\n});\n\nmongoose.connection.on('disconnected', function () {\n  console.info(`Mongoose disconnected to: ${config.get('MONGO_URL')}`);\n});\n\n/**\n * Get PORT from environment and store in Express.\n */\n\nlet port = normalizePort(process.env.PORT || config.get('PORT'));\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nlet server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  let port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  let bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  let addr = server.address();\n  let bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('MERNjs:app')('Listening on ' + bind + ' in ' + app.get('env') + ' env');\n}\n"]}