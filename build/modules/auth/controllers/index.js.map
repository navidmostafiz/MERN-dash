{"version":3,"sources":["../../../../server/modules/auth/controllers/index.js"],"names":["createAdminUserIfNotExist","authenticateUser","registerUser","req","res","next","find","exec","err","users","length","adminUser","Object","assign","firstName","lastName","emailAddress","password","generateHash","role","save","admin","console","log","findOne","body","user","status","json","success","message","validPassword","token","sign","get","expiresIn","data","email","newUser"],"mappings":"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","file":"index.js","sourcesContent":["import config from 'config';\nimport jwt from 'jsonwebtoken';\n\nimport User from '../../users/models/index.js';\n\nexport function createAdminUserIfNotExist(req, res, next) {\n  User.find().exec((err, users) => {\n    if (err) return next(err);\n    if (users.length) {\n      return next();\n    } else {\n      const adminUser = new User();\n      Object.assign(adminUser, {\n        firstName: 'Administrator',\n        lastName: 'User',\n        emailAddress: 'admin@mail.com',\n        password: adminUser.generateHash('admin'),\n        role: 'Administrator',\n      });\n      adminUser.save(function (err, admin) {\n        if (err) return next(err);\n        console.log('Create an admin user.');\n        return next();\n      });\n    }\n  });\n}\n\nexport function authenticateUser(req, res) {\n  // find the user\n  User.findOne({\n    emailAddress: req.body.emailAddress,\n  }, function (err, user) {\n    if (err) return next(err);\n\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        message: 'Authentication failed. User not found.',\n      });\n    } else if (user) {\n      // check if password matches\n      if (!user.validPassword(req.body.password)) {\n        return res.status(401).json({\n          success: false,\n          message: 'Authentication failed. Wrong password.',\n        });\n      } else {\n        // if user is found and password is right\n        // create a token\n        const token = jwt.sign(user, config.get('JWT.SECRET'), {\n          expiresIn: config.get('JWT.EXPIRES'),\n        });\n\n        // return the information including token as JSON\n        return res.json({\n          success: true,\n          message: 'Authenticated User!',\n          data: { token, email: user.emailAddress },\n        });\n      }\n    }\n  });\n}\n\nexport function registerUser(req, res, next) {\n  console.log('registerUser(req.body): ', req.body);\n  const newUser = new User();\n  Object.assign(newUser, req.body, {\n    password: newUser.generateHash(req.body.password),\n  });\n  console.log('registerUser(newUser): ', newUser);\n  newUser.save(function (err, user) {\n    if (err) return next(err);\n\n    return res.status(201).json({\n      success: true,\n      message: 'Registered user!',\n      data: user,\n    });\n  });\n\n}\n"]}