{"version":3,"sources":["../../../../server/modules/users/models/index.js"],"names":["userSchema","firstName","type","String","required","lastName","emailAddress","unique","password","status","enum","default","role","createdAt","Date","updatedAt","versionKey","pre","next","currentDate","methods","generateHash","hashSync","genSaltSync","validPassword","compareSync","User","model"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA;AACO,IAAMA,kCAAa,qBAAW;AACnCC,aAAW;AACTC,UAAMC,MADG;AAETC,cAAU,CAAC,IAAD,EAAO,yBAAP;AAFD,GADwB;AAKnCC,YAAU;AACRH,UAAMC,MADE;AAERC,cAAU,CAAC,IAAD,EAAO,wBAAP;AAFF,GALyB;AASnCE,gBAAc;AACZJ,UAAMC,MADM;AAEZC,cAAU,CAAC,IAAD,EAAO,4BAAP,CAFE;AAGZG,YAAQ;AAHI,GATqB;AAcnCC,YAAU;AACRN,UAAMC,MADE;AAERC,cAAU,CAAC,IAAD,EAAO,uBAAP;AAFF,GAdyB;AAkBnCK,UAAQ;AACNP,UAAMC,MADA;AAENO,UAAM,CAAC,QAAD,EAAW,UAAX,CAFA;AAGNC,aAAS;AAHH,GAlB2B;AAuBnCC,QAAM;AACJV,UAAMC,MADF;AAEJO,UAAM,CAAC,YAAD,EAAe,eAAf,CAFF;AAGJC,aAAS;AAHL,GAvB6B;AA4BnCE,aAAWC,IA5BwB;AA6BnCC,aAAWD;AA7BwB,CAAX,EA8BvB,EAAEE,YAAY,KAAd,EA9BuB,CAAnB;;AAgCP;;;;AAIA;AACAhB,WAAWiB,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACrC;AACA,MAAIC,cAAc,IAAIL,IAAJ,EAAlB;;AAEA;AACA,OAAKC,SAAL,GAAiBI,WAAjB;;AAEA;AACA,MAAI,CAAC,KAAKN,SAAV,EAAqB;AACnB,SAAKA,SAAL,GAAiBM,WAAjB;AACD;;AAEDD;AACD,CAbD;;AAeA;;;;AAIA;AACAlB,WAAWoB,OAAX,CAAmBC,YAAnB,GAAkC,UAAUb,QAAV,EAAoB;AACpD,SAAO,uBAAOc,QAAP,CAAgBd,QAAhB,EAA0B,uBAAOe,WAAP,CAAmB,EAAnB,CAA1B,CAAP;AACD,CAFD;;AAIA;AACAvB,WAAWoB,OAAX,CAAmBI,aAAnB,GAAmC,UAAUhB,QAAV,EAAoB;AACrD,SAAO,uBAAOiB,WAAP,CAAmBjB,QAAnB,EAA6B,KAAKA,QAAlC,CAAP;AACD,CAFD;;AAIA;AACA;AACA,IAAMkB,OAAO,mBAASC,KAAT,CAAe,MAAf,EAAuB3B,UAAvB,CAAb;;AAEA;kBACe0B,I","file":"index.js","sourcesContent":["import bcrypt from 'bcrypt-nodejs';\nimport mongoose, { Schema } from 'mongoose';\n\n// create a userSchema\nexport const userSchema = new Schema({\n  firstName: {\n    type: String,\n    required: [true, 'First Name is required.'],\n  },\n  lastName: {\n    type: String,\n    required: [true, 'Last Name is required.'],\n  },\n  emailAddress: {\n    type: String,\n    required: [true, 'Email Address is required.'],\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: [true, 'Password is required.'],\n  },\n  status: {\n    type: String,\n    enum: ['Active', 'Inactive'],\n    default: 'Active',\n  },\n  role: {\n    type: String,\n    enum: ['Subscriber', 'Administrator'],\n    default: 'Subscriber',\n  },\n  createdAt: Date,\n  updatedAt: Date,\n}, { versionKey: false });\n\n/*\n * userSchema middlewares\n */\n\n// on every save, add the date\nuserSchema.pre('save', function (next) {\n  // get the current date\n  var currentDate = new Date();\n\n  // change the updated_at field to current date\n  this.updatedAt = currentDate;\n\n  // if created_at doesn't exist, add to that field\n  if (!this.createdAt) {\n    this.createdAt = currentDate;\n  }\n\n  next();\n});\n\n/*\n * userSchema methods\n */\n\n// generating a hash\nuserSchema.methods.generateHash = function (password) {\n  return bcrypt.hashSync(password, bcrypt.genSaltSync(10));\n};\n\n// checking if password is valid\nuserSchema.methods.validPassword = function (password) {\n  return bcrypt.compareSync(password, this.password);\n};\n\n// the schema is useless so far\n// we need to create a model using it\nconst User = mongoose.model('User', userSchema);\n\n// make this available to our users in our Node applications\nexport default User;\n"]}